/*
 * This file is generated by jOOQ.
*/
package generated.db.tables;


import generated.db.Code4good;
import generated.db.Keys;
import generated.db.tables.records.QuizParticipantsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuizParticipants extends TableImpl<QuizParticipantsRecord> {

    private static final long serialVersionUID = 1868744005;

    /**
     * The reference instance of <code>code4good.quiz_participants</code>
     */
    public static final QuizParticipants QUIZ_PARTICIPANTS = new QuizParticipants();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuizParticipantsRecord> getRecordType() {
        return QuizParticipantsRecord.class;
    }

    /**
     * The column <code>code4good.quiz_participants.id</code>.
     */
    public final TableField<QuizParticipantsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>code4good.quiz_participants.age</code>.
     */
    public final TableField<QuizParticipantsRecord, Integer> AGE = createField("age", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>code4good.quiz_participants.sex</code>.
     */
    public final TableField<QuizParticipantsRecord, String> SEX = createField("sex", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

    /**
     * The column <code>code4good.quiz_participants.ip</code>.
     */
    public final TableField<QuizParticipantsRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

    /**
     * The column <code>code4good.quiz_participants.country</code>.
     */
    public final TableField<QuizParticipantsRecord, String> COUNTRY = createField("country", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>code4good.quiz_participants.quiz_answers</code>.
     */
    public final TableField<QuizParticipantsRecord, String> QUIZ_ANSWERS = createField("quiz_answers", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>code4good.quiz_participants.percent_correct_answers</code>.
     */
    public final TableField<QuizParticipantsRecord, Integer> PERCENT_CORRECT_ANSWERS = createField("percent_correct_answers", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>code4good.quiz_participants</code> table reference
     */
    public QuizParticipants() {
        this("quiz_participants", null);
    }

    /**
     * Create an aliased <code>code4good.quiz_participants</code> table reference
     */
    public QuizParticipants(String alias) {
        this(alias, QUIZ_PARTICIPANTS);
    }

    private QuizParticipants(String alias, Table<QuizParticipantsRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuizParticipants(String alias, Table<QuizParticipantsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Code4good.CODE4GOOD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<QuizParticipantsRecord, Long> getIdentity() {
        return Keys.IDENTITY_QUIZ_PARTICIPANTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QuizParticipantsRecord> getPrimaryKey() {
        return Keys.KEY_QUIZ_PARTICIPANTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QuizParticipantsRecord>> getKeys() {
        return Arrays.<UniqueKey<QuizParticipantsRecord>>asList(Keys.KEY_QUIZ_PARTICIPANTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuizParticipants as(String alias) {
        return new QuizParticipants(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizParticipants rename(String name) {
        return new QuizParticipants(name, null);
    }
}
