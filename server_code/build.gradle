apply plugin: "java"
apply plugin: "idea"
apply plugin: 'org.akhikhl.gretty'

buildscript {
	repositories {
		jcenter()
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath "org.akhikhl.gretty:gretty:+"
		classpath "org.jooq:jooq-codegen:3.9.1"
		classpath "mysql:mysql-connector-java:5.1.42"
	}
}

allprojects{
	/** Repositories declaration */
	repositories{
		jcenter()
		mavenLocal()
		mavenCentral()
	}

	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	tasks.withType(JavaCompile) {
			options.encoding = 'UTF-8'
	}
}

dependencies{
	compile "org.ninjaframework:ninja-standalone:${ninjaVersion}"
	
	compile "org.jooq:jooq:3.9.1"
	compile "org.jooq:jooq-meta:3.9.1"
	compile "mysql:mysql-connector-java:5.1.42"
	compile "com.zaxxer:HikariCP:2.6.1"
	
	testCompile "org.ninjaframework:ninja-test-utilities:${ninjaVersion}"
}

def debugArgs = []
if (gradle.startParameter.initScripts) {
	def line = file(gradle.startParameter.initScripts[0]).readLines().findAll({x -> x ==~ /.*-agentlib:jdwp=.*/ })[0]
	if (line) {
		debugArgs = ((line =~ /.*'(.*)'.*/)[0][1] as String).split(' ')
	}
}

gretty {
	/** Sets the context path */
	contextPath = '/'
	jvmArgs = ["-Dninja.mode=dev", *debugArgs]
	classPath = ["src/main/java"]
	httpsEnabled = true
	scanInterval = 1
}


Properties ninjaProps = new Properties()
ninjaProps.load(new FileInputStream("src/main/java/conf/application.conf"))

def writer = new StringWriter()
def xml = new groovy.xml.MarkupBuilder(writer)
.configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.9.0.xsd') {
    jdbc() {
        driver "com.mysql.jdbc.Driver"
        url "${ninjaProps.getProperty('application.db.jdbc')}"
        user "$System.env.LOCAL_DB_USERNAME"
        password "$System.env.LOCAL_DB_PASSWORD"
    }
    generator() {
        database() {
			name "org.jooq.util.mysql.MySQLDatabase"
			includes ".*"
			inputSchema "code4good"
        }
        generate([:]) {
            pojos true
            immutablePojos true
			jpaAnnotations true
			validationAnnotations true
			deprecated false
        }
        target() {
            packageName "generated.db"
            directory "src/main/java"
        }
    }
}

task(jooqGen) {
	doLast {
		org.jooq.util.GenerationTool.generate(
			javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
		)
	}
}